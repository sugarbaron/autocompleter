Консольное приложение, реализующее функцию автодополнения (autocompleter).

///////////////////////////////////////////////////////////////////////////////

Инструкция по сборке решения (для windows):
01. Запустить compile_and_create_jar.bat
    В результате в этой же директории соберётся autocompleter.jar

Инструкция по запуску:
01. Открыть консоль и перейти в директорию, содержащую autocompleter.jar
02. Запуск в режиме консольного ввода-вывода осуществляется командой
    java -jar autocompleter.jar
03. Запуск в режиме файлового ввода-вывода осуществляется командой
    java -jar autocompleter.jar test.in
    Файл с исходными данными (в данном случае test.in) должен находиться
    в одной директории с autocompleter.jar
    Результат в этом случае будет выведен в файл result_for_test.in
    Различные варианты файлов с исходными данными можно взять из директории test_data.
    (Файл positiveCase.in содержит пример, приведённый в тексте тестового задания.
    Файл test.in - исходные данные, направленные вместе с тестовым заданием.
    Остальные файлы - варианты некорректных исходных данных)

Информация о структуре решения и алгоритм:
Предлагаемый вариант построен из соображений, что для решения поставленнной задачи
целесообразно выполнить такие шаги (алгоритм):
    * считать исходные данные
    * отсортировать словарь по алфавиту
    * для каждого заданного префикса формировать набор вариантов таким образом:
        * найти в отсортированном словаре первое слово, начинающееся с указанного префикса
        * считать из словаря это слово и его частоту в формируемый набор вариантов
        * обратиться к следующему слову в словаре и проверить его на указанный префикс
        * и так далее пока не встретится слово, которое не содержит указанный префикс,
          либо размер формируемого набора не достигнет 10 элементов
        * отсортировать сформированный набор по частоте
        * вывести слова из сформированного набора в соответствии с порядком сортировки
Структура предлагаемого решения отражает сущности и термины, задействованные
в приведённом алгоритме:
    * класс IncomingDataProcessorModule - модуль считывания входных данных. При считывании заполняет
        словарь и коллекцию префиксов. Подключается через интерфейс IncomingDataProcessor, что даёт
        возможность заменить этот модуль другим классом реализации (например, использовать другой
        принцип считывания), не корректируя остальной код приложения.
    * класс TokenExtractor - служебный класс для IncomingDataProcessorModule. Инкапсулирует операции
        низкоуровневого чтения и непосредственной работы с потоком ввода. Предоставляет инструменты
        для последовательного чтения лексем из потока ввода.
    * класс Record - запись в словаре. Инкапсулирует слово и его частоту
    * класс DictionaryModule - модуль "словарь". Модуль хранения всех записей. Определяет лексикон
        системы. Выполняет задачу сортировки при добавлении записей. Выполняет основную задачу
        системы: для заданного префикса формирует отсортированный по частоте перечень вариантов
        автодополнения. Подключается через интерфейс Dictionary, что даёт возможность заменить
        этот модуль другим классом реализации (например, использовать другие механизмы сортировки,
        поиска и формирования вариантов автодополнения), не корректируя остальной код приложения.
    * класс Autocompleter - главный класс приложения. Конструирует все модули системы, устанавливает
        взаимосвязи между ними и запускает приложение.
    * класс Mode - представляет режим работы приложения (консольный/файловый)

Оценка вычислительной сложности алгоритма:
Вычисслительная сложность считывания исходных данных: O(n)
Вычисслительная сложность добавления записей в словарь: O(log(n))
Вычисслительная сложность поиска в словаре заданного префикса: O(log(n))
